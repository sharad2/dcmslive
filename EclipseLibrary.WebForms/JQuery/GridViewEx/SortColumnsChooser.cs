using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;
using System.Web.UI;
using System.Web.UI.WebControls;
using EclipseLibrary.Web.JQuery.Input;

namespace EclipseLibrary.Web.JQuery
{
    /// <summary>
    /// Provides the UI to choose multiple sort columns for an associated GridViewEx.
    /// The default sort expression of the grid is updated with the sort columns chosen by the user.
    /// If your page contains grid inside MasterDetailRepeater it is not supported for now.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Only sortable columns of the grid are displayed. Thus columns for which <c>SortExpression</c>
    /// is empty will not be visible in the list.
    /// </para>
    /// Sample Markup
    /// <code>
    /// <![CDATA[
    /// <jquery:SortColumnsChooser runat="server" GridViewExId="gv" />
    /// ]]>
    /// </code>
    /// SS 19 Apr 2009: If the GridViewEx does not exist within your naming container,
    /// you can specify an id path, e.g. repeater1$GridView1
    /// </remarks>
    [ParseChildren(true)]
    [PersistChildren(false)]
    public class SortColumnsChooser : WidgetBase, IPostBackDataHandler
    {
        //private readonly ButtonEx _btnIcon;
        public SortColumnsChooser()
            : base("sortColumnsChooser")
        {
            //_btnIcon = new ButtonEx();
            //_btnIcon.Icon = IconType.Custom;
            //_btnIcon.ButtonState = ButtonState.None;
        }

        [Browsable(true)]
        [IDReferenceProperty(typeof(GridViewEx))]
        public string GridViewExId { get; set; }

        /// <summary>
        /// If set to true, a group by marker becomes visible which the user can place within the sort columns.
        /// The selected sort expression will contain a $ where the group by marker was placed. It is up to you to make sense
        /// of this sort expression.
        /// </summary>
        [Browsable(true)]
        [DefaultValue(false)]
        public bool EnableGroupBy { get; set; }

        private GridViewEx _gv;
        protected override void OnInit(EventArgs e)
        {
            if (this.GridViewExId.Contains("$"))
            {
                string[] tokens = GridViewExId.Split('$');
                Control ctl = this.NamingContainer;
                foreach (string token in tokens)
                {
                    ctl = ctl.FindControl(token);
                }
                _gv = (GridViewEx)ctl;
            }
            else
            {
                _gv = (GridViewEx)this.NamingContainer.FindControl(this.GridViewExId);
            }
            base.OnInit(e);
        }


        // ************* Markup generated by the control ********************************************

        /// <summary>
        /// <div id="id" class="ecl-sortcolumnchooser">
        ///   Use Drag and Drop to add, remove or rearrange sort columns.
        ///   <div style="float:left" class="ui-widget">
        ///     <div class="ui-widget-header">Available Columns</div>
        ///     <ul id="id_1" class="ui-widget-content">
        ///       <li>Header Text <span class="ui-icon" style="visibility:hidden"></span></li>
        ///       ...
        ///     </ul>
        ///   </div>
        ///   <div style="float:right" class="ui-widget">
        ///     <div class="ui-widget-header">Sort Columns</div>
        ///     <ul id="id_2" class="ui-widget-content">
        ///       <li>Header Text <span class="ui-icon"></span></li>
        ///       ...
        ///     </ul>
        ///   </div>
        ///   <p>
        ///   Use drag and drop to add, remove or rearrange sort columns.
        ///   Click on the sort icon to toggle sort direction. A mouse is required.
        ///   </p>
        ///   <div>(Transfer Icon)</div>
        ///   <div style="clear:both"></div>
        /// </div>
        /// </summary>
        /// 

        //*******************************************************************************************

        protected override HtmlTextWriterTag TagKey
        {
            get
            {
                return HtmlTextWriterTag.Div;
            }
        }

        protected override void AddAttributesToRender(System.Collections.Generic.IDictionary<HtmlTextWriterAttribute, string> attributes, System.Collections.Generic.ICollection<string> cssClasses)
        {
            base.AddAttributesToRender(attributes, cssClasses);
            cssClasses.Add("ecl-sortcolumnchooser");
        }

        /// <summary>
        /// Finds grid view of the page in which our control was placed by using property GridViewExId
        /// Renders the markup for the SortColumnChooser control and then applies sorting in the contol 
        /// based on the DefaultSortExpression of the grid. Apllies direction based on grid view property 
        /// DefaultSortDirection.
        /// </summary>
        /// <param name="writer"></param>
        protected override void RenderContents(HtmlTextWriter writer)
        {
            base.RenderContents(writer);

            writer.AddStyleAttribute("float", "left");
            writer.AddAttribute(HtmlTextWriterAttribute.Class, "ui-widget");
            writer.RenderBeginTag(HtmlTextWriterTag.Div);
            writer.AddAttribute(HtmlTextWriterAttribute.Class, "ui-widget-header");
            writer.RenderBeginTag(HtmlTextWriterTag.Div);
            writer.Write("Available Columns");
            writer.RenderEndTag();      //div
            writer.AddAttribute(HtmlTextWriterAttribute.Id, this.ClientID + "_1");
            writer.AddAttribute(HtmlTextWriterAttribute.Class, "ui-widget-content");
            writer.RenderBeginTag(HtmlTextWriterTag.Ul);
            if (this.EnableGroupBy && _gv.SortExpressions.CountMasterExpressions == 0)
            {
                // If sort columns already contain group by marker, do not add it here
                RenderGroupByMarker(writer);
            }

            foreach (DataControlField col in
                _gv.Columns.Cast<DataControlField>().Where(p => !string.IsNullOrEmpty(p.SortExpression)))
            {
                // Only those columns which are sortable, and not part of default expression
                SortExpression colSortExpr = new SortExpression(col.SortExpression);
                if (!_gv.SortExpressions.Contains(colSortExpr))
                {
                    writer.AddAttribute(HtmlTextWriterAttribute.Class, "ui-state-default");
                    //string sortExprFixed = SortFormatProvider.FixSortExpressions(col.SortExpression);
                    writer.AddAttribute("sortexpr", colSortExpr.ToString());
                    IHasHeaderToolTip tip = col as IHasHeaderToolTip;
                    if (tip != null && !string.IsNullOrEmpty(tip.HeaderToolTip))
                    {
                        writer.AddAttribute(HtmlTextWriterAttribute.Title, tip.HeaderToolTip);
                    }
                    writer.RenderBeginTag(HtmlTextWriterTag.Li);
                    writer.Write(col.HeaderText.Replace("|", " - "));
                    writer.Write("&nbsp;&nbsp;");
                    // Hidden Icon
                    RenderSortIcon(writer, colSortExpr, null);
                    writer.RenderEndTag();      //li
                }
            }
            writer.RenderEndTag();      //ul
            writer.RenderEndTag();      //div

            writer.AddStyleAttribute("float", "right");
            writer.AddAttribute(HtmlTextWriterAttribute.Class, "ui-widget");
            writer.RenderBeginTag(HtmlTextWriterTag.Div);
            writer.AddAttribute(HtmlTextWriterAttribute.Class, "ui-widget-header");
            writer.RenderBeginTag(HtmlTextWriterTag.Div);
            writer.Write("Sort Columns");
            writer.RenderEndTag();      //div
            writer.AddAttribute(HtmlTextWriterAttribute.Id, this.ClientID + "_2");
            writer.AddAttribute(HtmlTextWriterAttribute.Class, "ui-widget-content");
            writer.RenderBeginTag(HtmlTextWriterTag.Ul);

            //int sequence = 0;
            for (int i = 0; i < _gv.SortExpressions.Count; ++i)
            {
                // Only those columns which are part of default expression
                if (i > 0 && i == _gv.SortExpressions.CountMasterExpressions)
                {
                    RenderGroupByMarker(writer);
                }
                DataControlField dcf = _gv.Columns.Cast<DataControlField>().FirstOrDefault(
                    p => _gv.SortExpressions[i].Equals(p.SortExpression));

                if (dcf != null)
                {
                    IHasHeaderToolTip tip = dcf as IHasHeaderToolTip;
                    if (tip != null && !string.IsNullOrEmpty(tip.HeaderToolTip))
                    {
                        writer.AddAttribute(HtmlTextWriterAttribute.Title, tip.HeaderToolTip);
                    }
                    writer.AddAttribute(HtmlTextWriterAttribute.Class, "ui-state-default ui-priority-primary");
                    //string sortExprFixed = SortFormatProvider.FixSortExpressions(sortExpr);
                    writer.AddAttribute("sortexpr", _gv.SortExpressions[i].ToString());
                    writer.RenderBeginTag(HtmlTextWriterTag.Li);
                    writer.Write(dcf.HeaderText.Replace("|", " - "));
                    writer.Write("&nbsp;&nbsp;");
                    //++sequence;
                    RenderSortIcon(writer, _gv.SortExpressions[i], i + 1);
                    writer.RenderEndTag();      //li
                }
            }
            if (_gv.SortExpressions.Count == _gv.SortExpressions.CountMasterExpressions)
            {
                // The group by marker is at the very end. Render it now
                RenderGroupByMarker(writer);
            }
            writer.RenderEndTag();      //ul
            writer.RenderBeginTag(HtmlTextWriterTag.P);
            writer.AddAttribute(HtmlTextWriterAttribute.Name, this.UniqueID);
            writer.AddAttribute(HtmlTextWriterAttribute.Type, "checkbox");
            writer.AddAttribute(HtmlTextWriterAttribute.Value, _gv.SortExpressions.ToString());
            writer.RenderBeginTag(HtmlTextWriterTag.Input);
            writer.RenderEndTag();
            writer.Write("&nbsp;Use these sort columns");
            writer.RenderEndTag(); //p
            writer.RenderEndTag();      //div

            // Instructions
            writer.RenderBeginTag(HtmlTextWriterTag.P);
            writer.Write("Use drag and drop to add, remove or rearrange sort columns. Click on the sort icon to toggle sort direction. A mouse is required.");
            writer.RenderEndTag(); //p

            //_btnIcon.CustomIconName = "ui-icon-transferthick-e-w";
            //_btnIcon.RenderControl(writer);
            ButtonEx.RenderIcon(writer, "ui-icon-transferthick-e-w");

            writer.RenderBeginTag(HtmlTextWriterTag.P);
            writer.Write("Removing all sort columns will revert to default sorting.");
            writer.RenderEndTag(); //p

            // div which clears floats
            writer.AddStyleAttribute("clear", "both");
            writer.RenderBeginTag(HtmlTextWriterTag.Div);
            writer.RenderEndTag();
            //writer.RenderEndTag();      //div
        }

        private static void RenderGroupByMarker(HtmlTextWriter writer)
        {
            writer.AddAttribute("sortexpr", "$");
            writer.AddAttribute(HtmlTextWriterAttribute.Class, "ui-state-active");
            writer.AddStyleAttribute(HtmlTextWriterStyle.WhiteSpace, "nowrap");
            writer.AddStyleAttribute(HtmlTextWriterStyle.TextAlign, "center");
            writer.AddAttribute(HtmlTextWriterAttribute.Title, "Group by Marker");
            writer.RenderBeginTag(HtmlTextWriterTag.Li);
            //ButtonEx btn = new ButtonEx();
            //btn.Icon = IconType.Custom;
            //btn.CustomIconName = "ui-icon-arrowthick-1-nw";
            //btn.ButtonState = ButtonState.None;
            //btn.RenderControl(writer);
            ButtonEx.RenderIcon(writer, "ui-icon-arrowthick-1-nw");
            writer.Write("Master Columns");
            //btn.CustomIconName = "ui-icon-arrowthick-1-ne";
            //btn.RenderControl(writer);
            ButtonEx.RenderIcon(writer, "ui-icon-arrowthick-1-ne");
            writer.RenderEndTag();      //li
        }

        /// <summary>
        ///  This function renders sort icon on the basis of 
        ///  passed direction and visibility by the caller.
        /// </summary>
        private static void RenderSortIcon(HtmlTextWriter writer, SortExpression sortExpr, int? sequence)
        {
            SortDirection dir = sortExpr.GetSortDirection();
            if (dir == SortDirection.Ascending)
            {
                //_btnIcon.CustomIconName = " ui-icon-triangle-1-n";
                ButtonEx.RenderIcon(writer, "ui-icon-triangle-1-n");
            }
            else
            {
                //_btnIcon.CustomIconName = " ui-icon-triangle-1-s";
                ButtonEx.RenderIcon(writer, "ui-icon-triangle-1-s");
            }

            //_btnIcon.RenderControl(writer);
            // Dynamically replaced with sort sequence
            writer.RenderBeginTag(HtmlTextWriterTag.Sup);
            writer.Write(sequence);
            writer.RenderEndTag();      // sup
        }

        protected override void PreCreateScripts()
        {
            JQueryScriptManager.Current.RegisterScriptBlock("SortColumnsChooserScript",
                Properties.Resources.SortColumnsChooserScript);
        }

        #region IPostBackDataHandler Members

        public bool LoadPostData(string postDataKey, NameValueCollection postCollection)
        {
            // user's choice is posted only if the checkbox is checked
            string str = postCollection[postDataKey];
            if (!string.IsNullOrEmpty(str))
            {
                _gv.DefaultSortExpression = str;
            }
            return false;
        }

        public void RaisePostDataChangedEvent()
        {
            throw new NotImplementedException();
        }

        #endregion

        //public override void Dispose()
        //{
        //    _btnIcon.Dispose();
        //    base.Dispose();
        //}
    }
}
